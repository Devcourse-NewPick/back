generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = "mysql://root:root@localhost:3308/newpick"
}

// User 모델
model User {
  id                      Int                 @id @default(autoincrement())
  email                   String              @unique
  password                String
  username                String?
  profileImg              String?
  interests               Json?
  timezone                String              @default("UTC")
  frequency               String              @default("weekly") // 발송 주기
  role                    String              @default("user")
  notificationPreferences Json?
  createdAt               DateTime            @default(now())
  updatedAt               DateTime            @updatedAt

  bookmarks               Bookmark[]
  feedbacks               Feedback[]
  oAuthTokens             OAuthToken[]
  retryQueues             RetryQueue[]
  subscribers             Subscriber[]

  @@map("users")
}

// Subscriber 모델
model Subscriber {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique // 사용자별 중복 구독 방지
  startedAt DateTime @default(now())
  endAt     DateTime?
  status    String   @default("active") // 상태 : active, paused, cancelled

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscribers")
}

// OAuthToken 모델
model OAuthToken {
  id           Int      @id @default(autoincrement())
  userId       Int
  accessToken  String   @db.Text
  refreshToken String   @db.Text
  expiresAt    DateTime
  createdAt    DateTime @default(now())

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("oauth_tokens")
}

// Newsletter 모델
model Newsletter {
  id         Int            @id @default(autoincrement())
  title      String
  content    String         @db.Text
  contentAsHTML String? @db.Text
  categoryId Int
  viewcount  Int           @default(0)
  usedNews   String         @db.Text
  createdAt  DateTime       @default(now())

  category   NewsCategory   @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  feedbacks  Feedback[]
  archives   EmailArchive[]

  @@map("newsletters")
}

// NewsCategory 모델
model NewsCategory {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  description String?      @db.Text

  newsletters Newsletter[]

  @@map("news_categories")
}

// Feedback 모델
model Feedback {
  id            Int      @id @default(autoincrement())
  userId        Int
  newsletterId  Int
  rating        Int
  comments      String?  @db.Text
  createdAt     DateTime @default(now())
  likes         Boolean  @default(false)
  newsId        Int

  user          User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  newsletter    Newsletter @relation(fields: [newsletterId], references: [id], onDelete: Cascade)

  @@map("feedbacks")
}

// RetryQueue 모델
model RetryQueue {
  id        Int      @id @default(autoincrement())
  userId    Int
  email     String
  status    String   @default("대기 중")
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("retry_queues")
}

// EmailArchive 모델
model EmailArchive {
  id           Int        @id @default(autoincrement())
  newsletterId Int
  sentAt       DateTime
  email        String

  newsletter   Newsletter @relation(fields: [newsletterId], references: [id], onDelete: Cascade)

  @@map("email_archives")
}

// AiProcessLog 모델
model AiProcessLog {
  id          Int      @id @default(autoincrement())
  newsId      String   @db.Text
  processType String
  result      String   @db.Text
  duration    Float
  createdAt   DateTime @default(now())
  status      String
  error       String?  @db.Text
  token       Int

  @@map("ai_process_logs")
}

// Bookmark 모델
model Bookmark {
  id     Int    @id @default(autoincrement())
  title  String
  url    String
  userId Int

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("bookmarks")
}
